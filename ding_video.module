<?php
/**
 * @file
 * ding_video.module
 */

/**
 * Implements hook_field_widget_properties_alter().
 */
function ding_video_field_widget_properties_alter(&$widget, $context) {
  if ($widget['module'] == 'media' && $context['entity_type'] == 'node') {
    $widget['settings']['allowed_types']['video'] = 'video';
  }
}

/**
 * Implements hook_node_view().
 */
function ding_video_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $media_field = field_view_field("node", $node, "field_{$node->type}_title_image");

    foreach ($media_field['#items'] as $key => $item) {
      if ($item['type'] == 'video') {
        $fid = $item['fid'];

        $display['settings'] = [
          'width' => '640',
          'height' => '390',
          'autohide' => 2,
          'autoplay' => 0,
          'color' => 'red',
          'enablejsapi' => 0,
          'loop' => 0,
          'modestbranding' => 0,
          'nocookie' => 0,
          'origin' => '',
          'protocol' => 'https:',
          'protocol_specify' => 0,
          'rel' => 1,
          'showinfo' => 1,
          'theme' => 'dark',
          'captions' => FALSE,
          'controls' => FALSE,
        ];

        $file = file_load($fid);
        $scheme = file_uri_scheme($file->uri);

        switch ($scheme) {
          case 'youtube':
            module_load_include('inc', 'media_youtube', '/includes/media_youtube.formatters.inc');
            $render_array = media_youtube_file_formatter_video_view($file, $display, LANGUAGE_NONE);
            $node->content["field_{$node->type}_title_image"][$key] = $render_array;
            break;

          case 'vimeo':
            module_load_include('inc', 'media_vimeo', '/includes/media_vimeo.formatters.inc');

            $display['settings']['api'] = 1;
            $display['settings']['byline'] = 1;
            $display['settings']['title'] = $file->filename;
            $display['settings']['portrait'] = 1;

            $render_array = media_vimeo_file_formatter_video_view($file, $display, LANGUAGE_NONE);
            $node->content["field_{$node->type}_title_image"][$key] = $render_array;
            break;

          case 'public':
            $render_array = [
              '#theme' => 'file_entity_file_video',
              '#files' => [$item],
              '#controls' => TRUE,
              '#autoplay' => FALSE,
              '#loop' => FALSE,
              '#muted' => FALSE,
              '#width' => NULL,
              '#height' => NULL,
              '#preload' => NULL,
            ];

            $node->content["field_{$node->type}_title_image"][$key] = $render_array;
            break;
        }
      }
    }
  }

  drupal_add_js(drupal_get_path('module', 'ding_video') . '/js/ding_video.js', 'file');
  drupal_add_css(drupal_get_path('module', 'ding_video') . '/css/ding_video.css');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ding_video_preprocess_node(&$variables) {
  $cts = [
    'ding_news',
    'ding_event'
  ];

  $node = $variables['node'];
  if (!in_array($node->type, $cts)) {
    return;
  }

  if ($variables['view_mode'] != 'teaser') {
    return;
  }

  $field_name = "field_{$node->type}_list_image";
  $list_image = $node->$field_name[LANGUAGE_NONE][0];

  if ($list_image['type'] == 'video') {
    switch ($list_image['filemime']) {
      case 'video/youtube':
        $media = new MediaYouTubeStreamWrapper();
        $media->setUri($list_image['uri']);
        $cover = $media->getLocalThumbnailPath();
        break;

      case 'video/vimeo':
        $media = new MediaVimeoStreamWrapper();
        $media->setUri($list_image['uri']);
        $cover = $media->getLocalThumbnailPath();
        break;

      default:
        $cover = NULL;
        break;
    }

    if (!empty($cover)) {
      $variables[$field_name][0]['uri'] = $cover;
    }
    else {
      unset($variables[$field_name]);
    }
  }
}
